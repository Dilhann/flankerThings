<usermanual>
___________________________________________________________________________________________________________________	

										ERIKSEN FLANKER TEST
___________________________________________________________________________________________________________________

Script Author: Katja Borchert, Ph.D. (katjab@millisecond.com) for Millisecond Software, LLC
Date:  09-19-2012
last updated:  02-22-2022 by K. Borchert (katjab@millisecond.com) for Millisecond Software, LLC

Script Copyright © 02-22-2022 Millisecond Software

___________________________________________________________________________________________________________________
BACKGROUND INFO 	
___________________________________________________________________________________________________________________	

											
This script implements the original Flanker Test procedure by Eriksen & Eriksen (1974).
The Flanker test is an inhibition test to assess the ability to suppress inappropriate responses
evoked by task irrelevant information.											
											
Reference:

Eriksen, B.A. & Eriksen, C.W (1974) Effects of noise letters upon the identification of a target letter 
in a nonsearch task. Perception & Psychophysics, 16, 143-149.

___________________________________________________________________________________________________________________
TASK DESCRIPTION	
___________________________________________________________________________________________________________________	
simple categorization task of 4 target letters (H, K, S, C) that appear above a fixation cross
into "angular"  vs. "curved" categories.
=> Press "Q" if it's H or K, press "P" if it's S or C.
Target letters can appear alone ("nonoise") or be flanked by noise letters ("noise") that can 
either be close together or far apart. 

Note: Responsekeys 
*can be changed under EDITABLE VALUES. 
*are counterbalanced by odd and even subjectnumbers

___________________________________________________________________________________________________________________	
DURATION 
___________________________________________________________________________________________________________________	
the default set-up of the script takes appr. 30+ minutes to complete

___________________________________________________________________________________________________________________	
DATA FILE INFORMATION 
___________________________________________________________________________________________________________________	
The default data stored in the data files are:

(1) Raw data file: 'flankertest_raw*.iqdat' (a separate file for each participant)

build:								The specific Inquisit version used (the 'build') that was run
computer.platform:					the platform the script was run on (win/mac/ios/android)
date, time: 						date and time script was run 
subject, group: 					with the current subject/groupnumber
session:							with the current session id

blockcode, blocknum:				the name and number of the current block (built-in Inquisit variable)
trialcode, trialnum: 				the name and number of the currently recorded trial (built-in Inquisit variable)
										Note: trialnum is a built-in Inquisit variable; it counts all trials run; even those
										that do not store data to the data file such as feedback trials. Thus, trialnum 
										may not reflect the number of main trials run per block.
									
trialcount:							counts the number of trials
responsecondition:					counterbalanced response key condition
noisecondition:						stores the current noise condition (1-5)

									1)	noise equal to target: all 6 noise letters = target letter (e.g, HHHHHHH)
									2)	noise similar to target: all 6 noise letters = the other letter in the target category (e.g. KKKHKKK)
									3)	noise other target set: all 6 noise letters = one of the letters of the opposite target category (e.g. SSSHSSS)
									Note: choice of letter of opposite target category is balanced across experiment 
									4)	noise similar to target: noise = 3 letters that have similar characteristics (e.g. NWZHNWZ)
									Note: position of the three letters balanced across experiment
									5)	noise dissimilar to the target: noise = 3 letters with dissimilar characteristics (e.g. QJGHQJG)
									Note: position of the three letters balanced across experiment 

spacingcondition:					stores the current spacing condition (1-3)
trialtype:							contains all trialinformation
											(Example: "K53B" -> target K, condition 5, spacing 3, 
											B=refers to one of three possible rotations of the noise stimuli in condition 5)
stimulusitem.-
stimulusitem.4:						the presented stimuli
								
response:							the participant's response (scancode of response buttons)
									16 = Q (left)
									25 = P (right)

correct:							accuracy of response: 1 = correct response; 0 = otherwise
latency: 							the response latency (in ms); measured from onset of stimuli


(2) Summary data file: 'FlankerTest_summary*.iqdat' (a separate file for each participant)

inquisit.version:				Inquisit version run
computer.platform:				the platform the script was run on (win/mac/ios/android)
startdate:						date script was run
starttime:						time script was started
subjectid:						assigned subject id number
groupid:						assigned group id number
sessionid:						assigned session id number
elapsedtime:					time it took to run script (in ms); measured from onset to offset of script
completed:						0 = script was not completed (prematurely aborted); 
								1 = script was completed (all conditions run)

properror_noise1-
properror_noise5:		error proportion, separately for each noise condition

properror_spacing1-
properror_spacing3:		error proportion, separately for each spacing condition

properror_nonoiseM:		error proportion of nonoise trials tested in a mixed (M) design
properror_nonoiseB:		error proportion of nonoise trials tested in a blocked (B) design

meanRT_noise1-
meanRT_noise5:			mean latency of correct responses, separately for each noise condition		

meanRT_spacing1-
meanRT_spacing3:		mean latency of correct responses, separately for each spacing condition

meanRT_nonoiseM:		mean latency of correct responses to nonoise trials tested in mixed (M) design
meanRT_nonoiseB:		mean latency of correct responses to nonoise trials tested in blocked (B) design


___________________________________________________________________________________________________________________	
EXPERIMENTAL SET-UP 
___________________________________________________________________________________________________________________	

(A) DESIGN:
3 (spacings) x 5 (noise conditions) tested within participants,
2 control conditions of nonoise targets tested in a mixed vs. blocked format within participants

(B) SESSION SET-UP:
6 experimental sessions (see Eriksen & Eriksen, 1974, p.146)
1 experimental session: 3 blocks.Mixed (3*32 trials = 3*(28 noisetrials + 4 nonoisetrials)) + 1 block.blocked (12 nonoisetrials)

= 6*3*28 noisetrials + 6*3*4 nonoisetrials(mixed) * 6*1*12 nonoisetrials(blocked)
= 504 noisetrials + 72 nonoisetrials(mixed) + 72 nonoisetrials(blocked)

=> nonoisetrials:
nonoisetrials per target letter (4 letters) in mixed and blocked format= 72/4= 18 (see Eriksen & Eriksen, 1974, p.146)

=> noisetrials:
noisetrials per letter spacing condition (3 spacing conditions)= 504/33 = 168
noisetrials per letter spacing condition per noise conditions (5+2* conditions) = 168/7 = 24 (see Eriksen & Eriksen, 1974)
noisetrials per letter spacing condition per noise conditions per letter (4)= 24/4 = 6 

(C) INDEPENDENT VARIABLES:

1. SPACING CONDITIONS: Eriksen & Eriksen (1974)
1)about 0.06 degree visual angle separation (depends on viewing distance and font size) -
2)about 0.5 degree visual angle separation (depends on viewing distance and font size)
3)about 1 degree visual angle (depends on viewing distance and font size)
(4) distance from target to fixation cross: 0.5 degree visual angle)

!!!Note: SPACING = NEEDS FINE TUNING
the default coordinates for the noise stimuli in this script are only 
rough approximations. They need to be fine-tuned by each experimenter.
Specifically: fine tune 
*distance target-to-fixation cross under EDITABLE VALUES (parameters.fix_distance)
*spacings between stimuli under EDITABLE VALUES (parameters.spacing1, parameters.spacing2, parameters.spacing3)
*fontstyle: Erikson & Erikson (1974) used Paratipe 18point Futura Bold Style,
=> this script uses Monospaced Lucida Console, 0.5cm: can be changed under EDITABLE VALUES (parameters.fontheight_innm)
Note: If Monospaced Lucida Console is not available try a different monospaced fontstyle

2. NOISE CONDITIONS:
1)	noise equal to target: all 6 noise letters = target letter (e.g, HHHHHHH)
2)	noise similar to target: all 6 noise letters = the other letter in the target category (e.g. KKKHKKK)
3)	noise other target set: all 6 noise letters = one of the letters of the opposite target category (e.g. SSSHSSS)
Note: choice of letter of opposite target category is balanced across experiment 
4)	noise similar to target: noise = 3 letters that have similar characteristics (e.g. NWZHNWZ)
Note: position of the three letters balanced across experiment
5)	noise dissimilar to the target: noise = 3 letters with dissimilar characteristics (e.g. QJGHQJG)
Note: position of the three letters balanced across experiment 

*Note:
Eriksen & Eriksen (1974) ran double the amount of trials in noise conditions 4 and 5 than in the remaining 3 conditions
(refer to Eriksen & Eriksen, 1974, Table 3, p.147), numberwise this is equivalent to running 7 conditions

(D) BLOCKS:
Each block.mixed runs 32 trials: 7 H-trials, 7 K-trials, 7 S-trials, 7 C-trials, as well as 
4 nonoise trials (one of each letter). 
Trials are randomly chosen without replacement.

3 blocks make up 1 experimental session: 
Every combination of letter x spacing condition x noise condition is run once (combinations of 
noise condition 4 and 5 are run twice), 
H: 1(=noise condition)1(=spacing condition),12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53 
K: 11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53 
S: 11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53 
C: 11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53 

Balancing of the different letter rotations/selections of noise conditions 3 (selection), 4 (rotation), 5 (rotation) 
is achieved across all 6 experimental sessions (but not across a single experimental session).
This script runs all 6 experimental sessions in a row.

Each block.blocked runs 12 nonoise trials, 3 of each of the 4 target letters. Letters
are randomly sampled without replacement.

(E) TRIALS:
*Fixation Cross => press Space Bar to bring on target (and noise letters)
*target appears directly above Fixation Cross 
	(NOTE: Eriksen & Eriksen, 1974: 1/2 degree visual angle above,
	the location in this script is only a rough approximation and needs fine-tuning under EDITABLE VALUES)
*noise letters appear flanking the target (in noise trials),
type of noise letters depends on noise condition, spacing depends on spacing condition

Notes: 
* In Eriksen & Eriksen (1974) the target and noise letters remained on the screen for 1s (regardless of whether 
a response is given) and then disappeared together. In this script the response terminates the trial.
* In Eriksen & Eriksen (1974) error trials were repeated later in the session. In this script, error trials
are not rerun.

PRACTICE:
By default, three blocks of 32 trials are given as practice. Number can be edited under section EDITABLE PARAMETERS.
During practice, participants receive feedback if they make a mistake.

___________________________________________________________________________________________________________________
STIMULI
___________________________________________________________________________________________________________________
target letters: H, K (angular), S, C (curved)

___________________________________________________________________________________________________________________	
INSTRUCTIONS 
___________________________________________________________________________________________________________________
Instructions are not original and can be easily edited under section INSTRUCTIONS

___________________________________________________________________________________________________________________	
EDITABLE CODE 
___________________________________________________________________________________________________________________	
check below for (relatively) easily editable parameters, stimuli, instructions etc. 
Keep in mind that you can use this script as a template and therefore always "mess" with the entire code 
to further customize your experiment.

The parameters you can change are:

Stimuli Sizing in mm:
/fontheight_inmm:						fontheight in cm (default: 0.5cm)
/screenheight: 							the height of the monitor that the experiment runs on
/fixed_distance_inmm:					the distance of the target stimuli from the fixation cross in mm (default is 10mm)
/spacing1_inmm:							the distance between stimuli in spacing condition 1 in mm (default is 3mm)
/spacing2_inmm:							the distance between stimuli in spacing condition 2 in mm (default is 10mm)
/spacing3_inmm:							the distance between stimuli in spacing condition 3 in mm (the default is 20mm)

Response Keys:
/leftkey:								left responsekey (default: "Q")
/rightke2:								right responsekey (default: "P")

Experimental Design:
/maxpracticeblocks:						determines how many practice blocks should be run (default: 3
										equivalent to one experimental session)
										
/trialtimeout:							the max. trial duration (in ms) (default: 1000ms)

/trialdelay:							the delay (in ms) of the trial after pressing the spacebar (default; 0ms)

</usermanual>


**************************************************************************************************************
**************************************************************************************************************
	EDITABLE PARAMETERS: change editable parameters here
**************************************************************************************************************
**************************************************************************************************************

<parameters>
/fontheight_inmm = 5
/fixed_distance_inmm = 10

/spacing1_inmm = 3
/spacing2_inmm = 10
/spacing3_inmm = 20

/leftkey = "Q"
/rightkey = "P"

/maxpracticeblocks = 3
/trialtimeout = 1000
/trialdelay = 0
</parameters>

**************************************************************************************************************
**************************************************************************************************************
	EDITABLE STIMULI: change editable stimuli here
**************************************************************************************************************
**************************************************************************************************************

NOTE: edit target and noise stimuli here

*Targets: 1-4
*Noise: 5-10
<item letters>
/1 = "H"
/2 = "K"
/3 = "S"
/4 = "C"
/5 = "N"
/6 = "W"
/7 = "Z"
/8 = "G"
/9 = "J"
/10 = "Q"
</item>

**************************************************************************************************************
**************************************************************************************************************
	EDITABLE INSTRUCTIONS: change instructions here
**************************************************************************************************************
**************************************************************************************************************
<instruct>
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ navigationbuttonfontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
</instruct>

<page instruct_begin>
<h1>FLANKER TASK</h1><hr>
<br>In this task you will see a fixation cross (+) in the middle of the screen.<br>
If you press SPACEBAR letters will appear above the fixation cross.<br>
<br>Your task is to: Press<br>
"<%values.responsekey1%>" if the letter directly above the fixation cross is an H or a K<br>
"<%values.responsekey2%>" if the letter directly above the fixation cross is an S or a C<br>
<br>The target letters H, K, S, or C may be flanked by several other letters. 
<br>!!!BUT: the target letter will <u>ALWAYS</u> appear in the same position above the fixation cross.<br>
<br>The letters will appear for only 1s. Try to be fast, but at the same time accurate.<br>
<br><br>Press the SPACEBAR to start some practice trials.
</page>


<page instruct_start>
<h1>Test Start</h1><hr>
<br><i>Remember:</i><br>
You will see a fixation cross. Once you have pressed the SPACEBAR letters will appear above the fixation cross.
Pay attention to the letter directly above the fixation cross. It will be either an H,K,S or C. 
This is your <u>TARGET</u> letter.<br>

<br><i>Your task is to: Press
<br>"<%values.responsekey1%>" if the TARGET letter is an H or a K
<br>"<%values.responsekey2%>" if the TARGET letter is an S or a C</i><br>

<br>All letters will disappear after 1s. Try to be fast AND accurate in your response.<br>
<br>You will <u>not</u> receive any more error feedback during the test.<br>

<br><br>Press the SPACEBAR to start.
</page>


<page instruct_blocked>
<h1>Instructions</h1><hr>
The next 12 trials will be similar to the ones before with one difference:<br>
<u>Only the target letter</u> appears above the fixation cross. No other letters will be presented.<br>
<br><i>Your task is to: Press<br>
"<%values.responsekey1%>" if the TARGET letter is an H or a K<br>
"<%values.responsekey2%>" if the TARGET letter is an S or a C</i><br>
<br><br><br>Press the SPACEBAR to start the test.
</page>

<page instruct_newsession>
<h1>Instructions</h1><hr>
In the following trials you will again be asked to respond to the letters H, K, S, C that 
appear above a fixation cross.<br>
<br>The target letters H, K, S, or C <u>may again be flanked by several other letters</u>. The target letter 
will always appear in the same position directly above the fixation cross.<br>

<br><i>Your task is to: Press
<br>"<%values.responsekey1%>" if the TARGET letter is an H or a K
<br>"<%values.responsekey2%>" if the TARGET letter is an S or a C</i><br>

<br>All letters will disappear after 1s. Try to be fast AND accurate in your response.<br>

<br><br>Press the SPACEBAR to start.
</page>

<page instruct_end>
Thank you!
</page>

<text keyReminder>
/ items = ("<%expressions.keyReminder%>")
/ position = (50%, 75%)
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ size = (80%, 5%)
/ vjustify = center
</text>

<text errortext>
/items = ("Error")
/position = (50%, 70%)
/ txcolor = red
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text fixationReminder>
/items = ("Press Spacebar when ready to start")
/ fontstyle = ("Courier New", 2%, true, false, false, false, 5, 1)
/ position = (50%, 70%)
/ txcolor = gray
</text>


<text ResponsekeyReminder_HK>
/items = ("H or K")
/ fontstyle = ("Lucida Console", 3%, true, false, false, false, 5, 1)
/ vposition = 10%
</text>

<text ResponsekeyReminder_SC>
/items = ("S or C")
/ fontstyle = ("Lucida Console", 3%, true, false, false, false, 5, 1)
/ vposition = 10%
</text>

****************************************************************************************************
general instruction expressions: adjust the instruction text depending on device used to run script
****************************************************************************************************
<expressions>
/keyReminder = if (computer.touch && !computer.haskeyboard) {"";} else {
"Put your index fingers on the left '<%parameters.leftkey%>' and the right '<%parameters.rightkey%>' keys";}
</expressions>

**************************************************************************************************************
								!!!REMAINING CODE: Customize after careful consideration only!!!
**************************************************************************************************************

**************************************************************************************************************
**************************************************************************************************************
	DEFAULT SCREEN SETTING
**************************************************************************************************************
**************************************************************************************************************
requires Inquisit 6.5.2.0

<defaults>
/ minimumversion = "6.5.2.0"
/ fontstyle = ("Lucida Console", 2%, true, false, false, false, 5, 1)
/ txcolor = black
/ txcolor = black
/ canvasaspectratio = (4, 3)
</defaults>

**************************************************************************************************************
**************************************************************************************************************
	DATA
**************************************************************************************************************
**************************************************************************************************************
********************
raw data
********************

<data>
/ columns = (build, computer.platform, date, time, subject, group, session, blockcode, blocknum, 
trialcode, trialnum,
 values.trialcount,
values.responsecondition, values.noisecondition, values.spacingcondition,values.trialtype,
stimulusitem, stimulusitem, stimulusitem,stimulusitem, stimulusitem, stimulusitem, stimulusitem,
response, correct, latency)
</data>

********************
summary data
********************

<summarydata>
/ columns = (inquisit.version, computer.platform, script.startdate, script.starttime, script.subjectid, script.groupid, script.sessionid, script.elapsedtime, 
script.completed,
expressions.properror_noise1, expressions.properror_noise2, expressions.properror_noise3, expressions.properror_noise4, expressions.properror_noise5,
expressions.properror_spacing1, expressions.properror_spacing2, expressions.properror_spacing3,
expressions.properror_nonoiseM, expressions.properror_nonoiseB, 
expressions.meanRT_noise1, expressions.meanRT_noise2, expressions.meanRT_noise3, expressions.meanRT_noise4, expressions.meanRT_noise5,
expressions.meanRT_spacing1, expressions.meanRT_spacing2, expressions.meanRT_spacing3,
expressions.meanRT_nonoiseM, expressions.meanRT_nonoiseB)
</summarydata>

**************************************************************************************************************
**************************************************************************************************************
	VALUES: automatically updated at runtime
**************************************************************************************************************
**************************************************************************************************************


/noise1-noise6:								contains the stimulus index for the first noise stimulus
/trialtype:									contains all trialinformation
											(Example: "K53B" -> target K, condition 5, spacing 3, 
											B=refers to one of three possible rotations of the noise stimuli in condition 5)
/nexttrial:									stores the number of the next trial (e.g. 1 => trial.H)
/nextcondition:								stores the next experimental condition to run 
											(Example: 23 -> noise condition 2, spacing condition 3)
/3AB,4ABC,5ABC:								helper variable to balance out different variants of condition3, 4 and 5
/noisecondition:							stores the current noise condition
/spacingcondition:							stores the current spacing condition
/responsekey1/responsekey2: 				helper variable to counterbalance response keys, contains scancode
/trialcount:								counts the number of trials
/countpracticeblocks:						counts the number of practice blocks run
/instruction:								helper variable for instructions for survey page
/responsecondition:							counterbalanced response key condition


<values>
/noise1 = 0
/noise2 = 0
/noise3 = 0
/noise4 = 0
/noise5 = 0
/noise6 = 0
/noise1x = 0
/noise2x = 0
/noise3x = 0
/noise4x = 0
/noise5x = 0
/noise6x = 0
/trialtype = ""
/nexttrial = 0
/nextcondition = 0
/firstletter = 0
/secondletter = 0
/3AB = ""
/4ABC = ""
/5ABC = ""
/noisecondition = 0
/spacingcondition = 0
/responsekey1 = 0
/responsekey2 = 0
/trialcount = 0
/countpracticeblocks = 0

/instruction = 0
/responsecondition = 0
</values>

********************************************
Summary Variables
********************************************
/count_noise1 -
/count_noise5:					count number of noise trials; separately for each noise condition
/countcorr_noise1-
/countcorr_noise5:				counts number of correct noise trials; separately for each noise condition
/sumrt_noise1 -
/sumrt_noise5:					sum of all latencies to correct noise trials; separately for each noise condition

/count_spacing1-
/count_spacing3:				count number of spacing trials; separately for each spacing condition
/countcorr_spacing1-
/countcorr_spacing3:			count number of correct spacing trials; separately for each spacing condition
/sumrt_spacing1-
/sumrt_spacing3:				sum of all latencies to correct spacing trials; separately for each spacing condition

/count_nonoiseM:				count number of nonoise trials in Mixed design
/countcorr_nonoiseM:			count number of correct nonoise trials in Mixed design
/count_nonoiseB:				count number of nonoise trials in Blocked design
/countcorr_nonoiseB:			count number of correct nonoise trials in Blocked design
/sumrt_nonoiseM:				sum of all latencies in correct nonoise trials in Mixed design
/sumrt_nonoiseB:				sum of all latencies in correct nonoise trials in Blocked design

<values>
/count_noise1 = 0
/count_noise2 = 0
/count_noise3 = 0
/count_noise4 = 0
/count_noise5 = 0
/countcorr_noise1 = 0
/countcorr_noise2 = 0
/countcorr_noise3 = 0
/countcorr_noise4 = 0
/countcorr_noise5 = 0
/sumrt_noise1 = 0
/sumrt_noise2 = 0
/sumrt_noise3 = 0
/sumrt_noise4 = 0
/sumrt_noise5 = 0

/count_spacing1 = 0
/count_spacing2 = 0
/count_spacing3 = 0
/countcorr_spacing1 = 0
/countcorr_spacing2 = 0
/countcorr_spacing3 = 0
/sumrt_spacing1 = 0
/sumrt_spacing2 = 0
/sumrt_spacing3 = 0

/count_nonoiseM = 0
/countcorr_nonoiseM = 0
/count_nonoiseB = 0
/countcorr_nonoiseB = 0
/sumrt_nonoiseM = 0
/sumrt_nonoiseB = 0
</values>


**************************************************************************************************************
**************************************************************************************************************
	EXPRESSIONS
**************************************************************************************************************
**************************************************************************************************************

/mwidth_x/mheight_y:		x and y coordinate of the monitor midpoint in pixels

/px_per_mm:					pixel per mm (conversion rate on the current monitor)
/fix_distance_inpx:			converts the relevant mm distance of fixation cross to target (=> editable) into pixel distance
/fontheight_inpx:			calculates the fontheight of the stimuli (=> editable) in pixels

/spacing1_inpx:				converts the relevant cm spacing distance1 (=> editable) into pixel distance
/spacing2_inpx: 			converts the relevant cm spacing distance2 (=> editable) into pixel distance
/spacing3_inpx: 			converts the relevant cm spacing distance3 (=> editable) into pixel distance

/noise1x1-noise6x3:			the x coordinates of the noise stimuli in spacing condition 1 to 3
							(Example: 	noise1x1: the outer left noise stimuli in spacing condition 1 - narrowest spacing,
										noise6x3: the outer right noise stimuli in spacing condition 3 - widest condition)
							!!!Note: 
							the default x coordinate values for the noise stimuli in this script are only 
							rough approximations. They need to be fine-tuned by each experimenter.

<expressions>
/mwidth_x = 0.5px * display.canvaswidth
/mheight_y = 0.5px * display.canvasheight

/px_per_mm = display.height/display.getmmx(display.height, 1)
/fix_distance_inpx = 1px * parameters.fixed_distance_inmm * expressions.px_per_mm
/fontheight_inpx = 1px* parameters.fontheight_inmm * expressions.px_per_mm

/spacing1_inpx = 1px * parameters.spacing1_inmm * expressions.px_per_mm
/spacing2_inpx = 1px * parameters.spacing2_inmm * expressions.px_per_mm
/spacing3_inpx = 1px * parameters.spacing3_inmm * expressions.px_per_mm

/noise1x1 = text.fixation.hposition - 3*expressions.spacing1_inpx
/noise1x2 = text.fixation.hposition - 3*expressions.spacing2_inpx
/noise1x3 = text.fixation.hposition - 3*expressions.spacing3_inpx
/noise2x1 = text.fixation.hposition - 2*expressions.spacing1_inpx
/noise2x2 = text.fixation.hposition - 2*expressions.spacing2_inpx
/noise2x3 = text.fixation.hposition - 2*expressions.spacing3_inpx
/noise3x1 = text.fixation.hposition - 1*expressions.spacing1_inpx
/noise3x2 = text.fixation.hposition - 1*expressions.spacing2_inpx
/noise3x3 = text.fixation.hposition - 1*expressions.spacing3_inpx
/noise4x1 = text.fixation.hposition + 1*expressions.spacing1_inpx
/noise4x2 = text.fixation.hposition + 1*expressions.spacing2_inpx
/noise4x3 = text.fixation.hposition + 1*expressions.spacing3_inpx
/noise5x1 = text.fixation.hposition + 2*expressions.spacing1_inpx
/noise5x2 = text.fixation.hposition + 2*expressions.spacing2_inpx
/noise5x3 = text.fixation.hposition + 2*expressions.spacing3_inpx
/noise6x1 = text.fixation.hposition + 3*expressions.spacing1_inpx
/noise6x2 = text.fixation.hposition + 3*expressions.spacing2_inpx
/noise6x3 = text.fixation.hposition + 3*expressions.spacing3_inpx
</expressions>

***********************************
Summary Variables
***********************************

/properror_noise1-
/properror_noise5:		error proportion, separately for each noise condition

/properror_spacing1-
/properror_spacing3:		error proportion, separately for each spacing condition

/properror_nonoiseM:		error proportion of nonoise trials tested in a mixed (M) design
/properror_nonoiseB:		error proportion of nonoise trials tested in a blocked (B) design

/meanRT_noise1-
/meanRT_noise5:				mean latency of correct responses, separately for each noise condition		

/meanRT_spacing1-
/meanRT_spacing3:			mean latency of correct responses, separately for each spacing condition

/meanRT_nonoiseM:			mean latency of correct responses to nonoise trials tested in mixed (M) design
/meanRT_nonoiseB:			mean latency of correct responses to nonoise trials tested in blocked (B) design

<expressions>
/properror_noise1 = 1 - (list.ACC_noise1.mean)
/properror_noise2 = 1 - (list.ACC_noise2.mean)
/properror_noise3 = 1 - (list.ACC_noise3.mean)
/properror_noise4 = 1 - (list.ACC_noise4.mean)
/properror_noise5 = 1 - (list.ACC_noise5.mean)

/properror_spacing1 = 1 - (list.ACC_spacing1.mean)
/properror_spacing2 = 1 - (list.ACC_spacing2.mean)
/properror_spacing3 = 1 - (list.ACC_spacing3.mean)

/properror_nonoiseM = 1 - (list.ACC_nonoiseM.mean)
/properror_nonoiseB = 1 - (list.ACC_nonoiseB.mean)

/meanRT_noise1 = list.RT_noise1.mean
/meanRT_noise2 = list.RT_noise2.mean
/meanRT_noise3 = list.RT_noise3.mean
/meanRT_noise4 = list.RT_noise4.mean
/meanRT_noise5 = list.RT_noise5.mean

/meanRT_spacing1 = list.RT_spacing1.mean
/meanRT_spacing2 = list.RT_spacing2.mean
/meanRT_spacing3 = list.RT_spacing3.mean

/meanRT_nonoiseM = list.RT_nonoiseM.mean
/meanRT_nonoiseB = list.RT_nonoiseB.mean
</expressions>

**************************************************************************************************************
**************************************************************************************************************
	STIMULI
**************************************************************************************************************
**************************************************************************************************************

<text targetH>
/items = letters
/select = 1
/ hposition = text.fixation.hposition
/vposition = text.fixation.vposition - expressions.fix_distance_inpx
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>
 
<text targetK>
/items = letters
/select = 2
/ hposition = text.fixation.hposition
/vposition = text.fixation.vposition - expressions.fix_distance_inpx
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text targetS>
/items = letters
/select = 3
/ hposition = text.fixation.hposition
/vposition = text.fixation.vposition - expressions.fix_distance_inpx
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text targetC>
/items = letters
/select = 4
/ hposition = text.fixation.hposition
/vposition = text.fixation.vposition - expressions.fix_distance_inpx
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text noise1>
/items = letters
/select = values.noise1
/position = (values.noise1x, text.fixation.vposition - expressions.fix_distance_inpx)
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text noise2>
/items = letters
/select = values.noise2
/position = (values.noise2x, text.fixation.vposition - expressions.fix_distance_inpx)
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text noise3>
/items = letters
/select = values.noise3
/position = (values.noise3x, text.fixation.vposition - expressions.fix_distance_inpx)
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text noise4>
/items = letters
/select = values.noise4
/position = (values.noise4x, text.fixation.vposition - expressions.fix_distance_inpx)
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text noise5>
/items = letters
/select = values.noise5
/position = (values.noise5x, text.fixation.vposition - expressions.fix_distance_inpx)
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text noise6>
/items = letters
/select = values.noise6
/position = (values.noise6x, text.fixation.vposition - expressions.fix_distance_inpx)
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text nonoisetargetmixed>
/items = ("H","K","S","C")
/ hposition = text.fixation.hposition
/vposition = text.fixation.vposition - expressions.fix_distance_inpx
/select = noreplace
/resetinterval = 1
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text nonoisetargetblocked>
/items = ("H","H","H","K","K","K","S","S","S","C","C","C")
/ hposition = text.fixation.hposition
/vposition = text.fixation.vposition - expressions.fix_distance_inpx
/select = noreplace
/resetinterval = 1
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>

<text fixation>
/hposition = expressions.mwidth_x
/vposition = expressions.mheight_y
/items = ("+")
/erase = false
/ fontstyle = ("Lucida Console", expressions.fontheight_inpx, true, false, false, false, 5, 1)
</text>



**************************************************************************************************************
**************************************************************************************************************
	LISTS
**************************************************************************************************************
**************************************************************************************************************

Note: 
* list.nexttrial selects one of the 32 trials for each block randomly without replacement
* it selects amongst 7 noisetrials for each of the four letters + 4 nonoisetrials (0),
* the list resets after each block
<list nexttrial>
/items = (1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0)
/ resetinterval = 1
/ selectionmode = random
/replace = false
</list>


H-Q lists: 
*lists select the nature of the trial: 
11 => 1: noise condition 1; 1: spacing condition 1
32 => 3: noise condition 3; 2: spacing condition 2
(noise condition 4 and noise condition 5 are run double)
* they are used for an entire experimental session
* they resets after one experimental session (3 blocks that use them)

<list h>
/items = (11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53)
/ resetinterval = 3
/ selectionmode = random
/replace = false
</list>

<list k>
/items = (11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53)
/ resetinterval = 3
/ selectionmode = random
/replace = false
</list>

<list s>
/items = (11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53)
/ resetinterval = 3
/ selectionmode = random
/replace = false
</list>

<list c>
/items = (11,12,13,21,22,23,31,32,33,41,42,43,41,42,43,51,52,53,51,52,53)
/ resetinterval = 3
/ selectionmode = random
/replace = false
</list>


lists h31-c33:
*condition 3: target letter can be paired with either one of the two letters from the opposite category
*these lists ensure that across the entire experiment, each pairing is presented half the time
* each letter in each noise condition in each spacing condition is presented 6 times

e.g. letter H, noise condition 3, spacing condition 1
<list h31>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

e.g. letter H, noise condition 3, spacing condition 2
<list h32>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list h33>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>


<list k31>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k32>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k33>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s31>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s32>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s33>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c31>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c32>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c33>
/items = ("A","A","A","B","B","B")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

lists h41-c43:
*condition 4: target letter gets presented with 3 similar noise letters, those letters can
be arranged in three different ways
*these lists ensure that across the entire experiment, each pairing is presented 1/3 of the time
*item lists twice the size of condition 1-3 per experimental design

e.g. letter H, noise condition 4, spacing condition 1
<list h41>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list h42>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list h43>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k41>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k42>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k43>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s41>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s42>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s43>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c41>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c42>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c43>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

lists h51-c53:
*condition 5: target letter gets presented with 3 dissimilar noise letters, those letters can
be arranged in three different ways
*these lists ensure that across the entire experiment, each pairing is presented 1/3 of the time
*item lists twice the size of condition 1-3 per experimental design

e.g. letter H, noise condition 5, spacing condition 1
<list h51>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list h52>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list h53>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k51>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k52>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list k53>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s51>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s52>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list s53>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c51>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c52>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

<list c53>
/items = ("A","B","C","A","B","C","A","B","C","A","B","C")
/resetinterval = 30
/selectionmode = random
/replace = false
</list>

*************************************************
Data Lists: used for descriptive statistics
store correct latencies/accuracy data
fill up during runtime
*************************************************

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list overallACC>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list overallRT>
</list>

<list ACC_noise1>
</list>

<list ACC_noise2>
</list>

<list ACC_noise3>
</list>

<list ACC_noise4>
</list>

<list ACC_noise5>
</list>

<list RT_noise1>
</list>

<list RT_noise2>
</list>

<list RT_noise3>
</list>

<list RT_noise4>
</list>

<list RT_noise5>
</list>

<list ACC_spacing1>
</list>

<list ACC_spacing2>
</list>

<list ACC_spacing3>
</list>

<list RT_spacing1>
</list>

<list RT_spacing2>
</list>

<list RT_spacing3>
</list>


<list ACC_nonoiseM>
</list>

<list ACC_nonoiseB>
</list>

<list RT_nonoiseM>
</list>

<list RT_nonoiseB>
</list>

**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENTAL TRIALS
**************************************************************************************************************
**************************************************************************************************************
NOTE: 
* In Eriksen & Eriksen (1974) the target and noise letters remained on the screen for 1s and
then disappeared together. That's the default in this script (/responseinterrupt = trial).
* If targets and noise should disappear immediately after a response is given, set
/responseinterrupt = immediate             in all trials.


**************************************
Fixation Trials
**************************************
<trial fixation>
/ontrialbegin = [
	values.trialcount +=1;
	trial.fixation.insertstimulustime(text.fixationReminder, 5000);
]	
/stimulusframes = [1 = fixation, keyReminder]
/validresponse = (" ")
/ correctresponse = (" ")
/ beginresponsetime = 0
/ responseinterrupt = immediate
/ontrialend = [
	values.nexttrial = list.nexttrial.nextvalue;		
	trial.fixation.resetstimulusframes();
]
/branch = [
	if (values.nexttrial == 0) {
		return trial.NoNoiseMixed;
	} else if (values.nexttrial == 1) {
		return trial.H;
	} else if (values.nexttrial == 2) {
		return trial.K;
	} else if (values.nexttrial == 3) {
		return trial.S;
	} else if (values.nexttrial == 4) {
		return trial.C;
	};
]
/recorddata = false
/errormessage = false
/ posttrialpause = parameters.trialdelay
</trial>


<trial fixationBlocked>
/ontrialbegin = [
	values.trialcount +=1;
]
/stimulusframes = [1 = fixation, keyReminder]
/validresponse = (" ")
/branch = [return trial.nonoiseblocked;]
/recorddata = false
/errormessage = false
</trial>

**************************************
No-Noise trials:
**************************************
<trial NoNoiseMixed>
/ontrialbegin = [
	values.trialtype = "";
]
/stimulustimes = [0 = nonoisetargetmixed]
/responseinterrupt = trial
/responsetime = 0
/validresponse = (parameters.leftkey, parameters.rightkey)
/iscorrectresponse = [
	return(
		((text.nonoisetargetmixed.currentitem == "H" || text.nonoisetargetmixed.currentitem == "K") && trial.NoNoiseMixed.responsetext == values.responsekey1) ||
		((text.nonoisetargetmixed.currentitem == "S" || text.nonoisetargetmixed.currentitem == "C") && trial.NoNoiseMixed.responsetext == values.responsekey2));
]
/ontrialend = [
	values.trialtype = text.nonoisetargetmixed.currentitem; 
	values.trialtype = concat(values.trialtype, "_mixed");
	values.noisecondition = "";
	values.spacingcondition = "";
	list.overallACC.appenditem(trial.NoNoiseMixed.correct);
	list.ACC_nonoiseM.appenditem(trial.NoNoiseMixed.correct);
	if (trial.nonoisemixed.correct) {
		list.RT_nonoiseM.appenditem(trial.nonoisemixed.latency);
		list.overallRT.appenditem(trial.nonoisemixed.latency);
	};
]
/timeout = (parameters.trialtimeout)

</trial>


<trial NoNoiseBlocked>
/ontrialbegin = [
	values.trialtype = "";
]
/stimulustimes = [0 = nonoisetargetblocked]
/responseinterrupt = trial
/responsetime = 0
/validresponse = (parameters.leftkey, parameters.rightkey)
/iscorrectresponse = [
	return(
		((text.nonoisetargetblocked.currentitem == "H" || text.nonoisetargetblocked.currentitem == "K") && trial.NoNoiseBlocked.responsetext == values.responsekey1) ||
		((text.nonoisetargetblocked.currentitem == "S" || text.nonoisetargetblocked.currentitem == "C") && trial.NoNoiseBlocked.responsetext == values.responsekey2));
]
/ontrialend = [
	values.trialtype = text.nonoisetargetblocked.currentitem; 
	values.trialtype = concat(values.trialtype, "_blocked");
	values.noisecondition = "";
	values.spacingcondition = "";
	list.overallACC.appenditem(trial.NoNoiseBlocked.correct);
	list.ACC_nonoiseB.appenditem(trial.NoNoiseBlocked.correct);
	if (trial.NoNoiseBlocked.correct) {
		list.RT_nonoiseB.appenditem(trial.NoNoiseBlocked.latency);
		list.overallRT.appenditem(trial.NoNoiseBlocked.latency);
	};
]
/timeout = (parameters.trialtimeout)
</trial>

**************************************
Noise trials:
**************************************
<trial H>
/ontrialbegin = [
	values.nextcondition = list.h.nextvalue;
	values.noisecondition = substring(values.nextcondition,0,1);
	values.spacingcondition = substring(values.nextcondition,1,1);
	values.3AB = ""; 
	values.4ABC = ""; 
	values.5ABC = "";
	values.trialtype = "H"; 
	values.trialtype = concat(values.trialtype, values.nextcondition);

	if (values.nextcondition == 11){
		values.noise1 = 1;
		values.noise2 = 1;
		values.noise3 = 1; 
		values.noise4 = 1;
		values.noise5 = 1;
		values.noise6 = 1;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 12){
		values.noise1 = 1;
		values.noise2 = 1;
		values.noise3 = 1; 
		values.noise4 = 1;
		values.noise5 = 1;
		values.noise6 = 1;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 13){
		values.noise1 = 1;
		values.noise2 = 1;
		values.noise3 = 1; 
		values.noise4 = 1;
		values.noise5 = 1;
		values.noise6 = 1;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;

	} else if (values.nextcondition == 21){
		values.noise1 = 2;
		values.noise2 = 2;
		values.noise3 = 2; 
		values.noise4 = 2;
		values.noise5 = 2;
		values.noise6 = 2;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 22){
		values.noise1 = 2;
		values.noise2 = 2;
		values.noise3 = 2; 
		values.noise4 = 2;
		values.noise5 = 2;
		values.noise6 = 2;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 23){
		values.noise1 = 2;
		values.noise2 = 2;
		values.noise3 = 2; 
		values.noise4 = 2;
		values.noise5 = 2;
		values.noise6 = 2;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;

	} else if (values.nextcondition == 31){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.3AB = list.h31.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 3;
			values.noise2 = 3;
			values.noise3 = 3;
			values.noise4 = 3;
			values.noise5 = 3;
			values.noise6 = 3;
		} else if (values.3AB == "B"){
			values.noise1 = 4;
			values.noise2 = 4;
			values.noise3 = 4;
			values.noise4 = 4;
			values.noise5 = 4;
			values.noise6 = 4;
		};
	} else if (values.nextcondition == 32){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.3AB = list.h32.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 3;
			values.noise2 = 3;
			values.noise3 = 3;
			values.noise4 = 3;
			values.noise5 = 3;
			values.noise6 = 3;
		} else if (values.3AB == "B"){
			values.noise1 = 4;
			values.noise2 = 4;
			values.noise3 = 4;
			values.noise4 = 4;
			values.noise5 = 4;
			values.noise6 = 4;
		};
	} else if (values.nextcondition == 33){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.3AB = list.h33.nextvalue; 
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 3;
			values.noise2 = 3;
			values.noise3 = 3;
			values.noise4 = 3;
			values.noise5 = 3;
			values.noise6 = 3;
		} else if (values.3AB == "B"){
			values.noise1 = 4;
			values.noise2 = 4;
			values.noise3 = 4;
			values.noise4 = 4;
			values.noise5 = 4;
			values.noise6 = 4;
		};
	} else if (values.nextcondition == 41){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.4ABC = list.h41.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.4ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.4ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	} else if (values.nextcondition == 42){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.4ABC = list.h42.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.4ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.4ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};

	} else if (values.nextcondition == 43){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.4ABC = list.h43.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.4ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.4ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	} else if (values.nextcondition == 51){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.5ABC = list.h51.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.5ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.5ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 52){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.5ABC = list.h52.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.5ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.5ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 53){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.5ABC = list.h53.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.5ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.5ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	};
]
/stimulustimes = [0 = noise1, noise2, noise3, targetH, noise4, noise5, noise6]
/responseinterrupt = trial
/responsetime = 0
/validresponse = (parameters.leftkey, parameters.rightkey)
/correctresponse = (values.responsekey1)
/timeout = (parameters.trialtimeout)

/ontrialend = [
	list.overallACC.appenditem(trial.H.correct);
	
	if (values.noisecondition == 1) {
		list.ACC_noise1.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_noise1.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};
	} else if (values.noisecondition == 2) {
		list.ACC_noise2.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_noise2.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};
	} else if (values.noisecondition == 3) {
		list.ACC_noise3.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_noise3.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};	
	} else if (values.noisecondition == 4) {
		list.ACC_noise4.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_noise4.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};	
	} else if (values.noisecondition == 5) {
		list.ACC_noise5.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_noise5.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};	
	};
	
	if (values.spacingcondition == 1) {
		list.ACC_spacing1.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_spacing1.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};
	} else if (values.spacingcondition == 2) {
		list.ACC_spacing2.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_spacing2.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		};	
	} else if (values.spacingcondition == 3) {
		list.ACC_spacing3.appenditem(trial.H.correct);
		if (trial.H.correct){ 
			list.RT_spacing3.appenditem(trial.H.latency);
			list.overallRT.appenditem(trial.H.latency);
		}; 		
	};
]
</trial>


<trial K>
/ontrialbegin = [
	values.nextcondition = list.k.nextvalue;
	values.noisecondition = substring(values.nextcondition,0,1);
	values.spacingcondition = substring(values.nextcondition,1,1);
	values.3AB = ""; 
	values.4ABC = ""; 
	values.5ABC = "";
	values.trialtype = "K"; 
	values.trialtype = concat(values.trialtype, values.nextcondition);

	if (values.nextcondition == 11){
		values.noise1 = 2;
		values.noise2 = 2;
		values.noise3 = 2; 
		values.noise4 = 2;
		values.noise5 = 2;
		values.noise6 = 2;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 12){
		values.noise1 = 2;
		values.noise2 = 2;
		values.noise3 = 2; 
		values.noise4 = 2;
		values.noise5 = 2;
		values.noise6 = 2;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 13){
		values.noise1 = 2;
		values.noise2 = 2;
		values.noise3 = 2; 
		values.noise4 = 2;
		values.noise5 = 2;
		values.noise6 = 2;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
	} else if (values.nextcondition == 21){
		values.noise1 = 1;
		values.noise2 = 1;
		values.noise3 = 1; 
		values.noise4 = 1;
		values.noise5 = 1;
		values.noise6 = 1;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 22){
		values.noise1 = 1;
		values.noise2 = 1;
		values.noise3 = 1; 
		values.noise4 = 1;
		values.noise5 = 1;
		values.noise6 = 1;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 23){
		values.noise1 = 1;
		values.noise2 = 1;
		values.noise3 = 1; 
		values.noise4 = 1;
		values.noise5 = 1;
		values.noise6 = 1;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;

	} else if (values.nextcondition == 31){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.3AB = list.k31.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 3;
			values.noise2 = 3;
			values.noise3 = 3;
			values.noise4 = 3;
			values.noise5 = 3;
			values.noise6 = 3;
		} else if (values.3AB == "B"){
			values.noise1 = 4;
			values.noise2 = 4;
			values.noise3 = 4;
			values.noise4 = 4;
			values.noise5 = 4;
			values.noise6 = 4;
		};

	} else if (values.nextcondition == 32){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.3AB = list.k32.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 3;
			values.noise2 = 3;
			values.noise3 = 3;
			values.noise4 = 3;
			values.noise5 = 3;
			values.noise6 = 3;
		} else if (values.3AB == "B"){
			values.noise1 = 4;
			values.noise2 = 4;
			values.noise3 = 4;
			values.noise4 = 4;
			values.noise5 = 4;
			values.noise6 = 4;
		};

	} else if (values.nextcondition == 33){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.3AB = list.k33.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 3;
			values.noise2 = 3;
			values.noise3 = 3;
			values.noise4 = 3;
			values.noise5 = 3;
			values.noise6 = 3;
		} else if (values.3AB == "B"){
			values.noise1 = 4;
			values.noise2 = 4;
			values.noise3 = 4;
			values.noise4 = 4;
			values.noise5 = 4;
			values.noise6 = 4;
		};

	} else if (values.nextcondition == 41){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.4ABC = list.k41.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.4ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.4ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};

	} else if (values.nextcondition == 42){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.4ABC = list.k42.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.4ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.4ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	} else if (values.nextcondition == 43){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.4ABC = list.k43.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.4ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.4ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	} else if (values.nextcondition == 51){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.5ABC = list.k51.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.5ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.5ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 52){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.5ABC = list.k52.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.5ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.5ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 53){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.5ABC = list.k53.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.5ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.5ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	};
]


/stimulustimes = [0 = noise1, noise2, noise3, targetK, noise4, noise5, noise6]
/responseinterrupt = trial
/responsetime = 0
/validresponse = (parameters.leftkey, parameters.rightkey)
/correctresponse = (values.responsekey1)
/timeout = (parameters.trialtimeout)

/ontrialend = [
	list.overallACC.appenditem(trial.K.correct);
	
	if (values.noisecondition == 1) {
		list.ACC_noise1.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_noise1.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};
	} else if (values.noisecondition == 2) {
		list.ACC_noise2.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_noise2.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};
	} else if (values.noisecondition == 3) {
		list.ACC_noise3.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_noise3.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};	
	} else if (values.noisecondition == 4) {
		list.ACC_noise4.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_noise4.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};	
	} else if (values.noisecondition == 5) {
		list.ACC_noise5.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_noise5.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};	
	};
	
	if (values.spacingcondition == 1) {
		list.ACC_spacing1.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_spacing1.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};
	} else if (values.spacingcondition == 2) {
		list.ACC_spacing2.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_spacing2.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		};	
	} else if (values.spacingcondition == 3) {
		list.ACC_spacing3.appenditem(trial.K.correct);
		if (trial.K.correct){ 
			list.RT_spacing3.appenditem(trial.K.latency);
			list.overallRT.appenditem(trial.K.latency);
		}; 		
	};
]
</trial>


<trial S>
/ontrialbegin = [
	values.nextcondition = list.s.nextvalue;
	values.noisecondition = substring(values.nextcondition,0,1);
	values.spacingcondition = substring(values.nextcondition,1,1);
	values.3AB = ""; 
	values.4ABC = ""; 
	values.5ABC = "";
	values.trialtype = "S"; 
	values.trialtype = concat(values.trialtype, values.nextcondition);

	if (values.nextcondition == 11){
		values.noise1 = 3;
		values.noise2 = 3;
		values.noise3 = 3; 
		values.noise4 = 3;
		values.noise5 = 3;
		values.noise6 = 3;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 12){
		values.noise1 = 3;
		values.noise2 = 3;
		values.noise3 = 3; 
		values.noise4 = 3;
		values.noise5 = 3;
		values.noise6 = 3;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 13){
		values.noise1 = 3;
		values.noise2 = 3;
		values.noise3 = 3; 
		values.noise4 = 3;
		values.noise5 = 3;
		values.noise6 = 3;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
	};

	if (values.nextcondition == 21){
		values.noise1 = 4;
		values.noise2 = 4;
		values.noise3 = 4; 
		values.noise4 = 4;
		values.noise5 = 4;
		values.noise6 = 4;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 22){
		values.noise1 = 4;
		values.noise2 = 4;
		values.noise3 = 4; 
		values.noise4 = 4;
		values.noise5 = 4;
		values.noise6 = 4;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 23){
		values.noise1 = 4;
		values.noise2 = 4;
		values.noise3 = 4; 
		values.noise4 = 4;
		values.noise5 = 4;
		values.noise6 = 4;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
	} else if (values.nextcondition == 31){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.3AB = list.s31.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 1;
			values.noise2 = 1;
			values.noise3 = 1;
			values.noise4 = 1;
			values.noise5 = 1;
			values.noise6 = 1;
		} else if (values.3AB == "B"){
			values.noise1 = 2;
			values.noise2 = 2;
			values.noise3 = 2;
			values.noise4 = 2;
			values.noise5 = 2;
			values.noise6 = 2;
		};
	} else if (values.nextcondition == 32){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.3AB = list.s32.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 1;
			values.noise2 = 1;
			values.noise3 = 1;
			values.noise4 = 1;
			values.noise5 = 1;
			values.noise6 = 1;
		} else if (values.3AB == "B"){
			values.noise1 = 2;
			values.noise2 = 2;
			values.noise3 = 2;
			values.noise4 = 2;
			values.noise5 = 2;
			values.noise6 = 2;
		};
	} else if (values.nextcondition == 33){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.3AB = list.s33.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 1;
			values.noise2 = 1;
			values.noise3 = 1;
			values.noise4 = 1;
			values.noise5 = 1;
			values.noise6 = 1;
		} else if (values.3AB == "B"){
			values.noise1 = 2;
			values.noise2 = 2;
			values.noise3 = 2;
			values.noise4 = 2;
			values.noise5 = 2;
			values.noise6 = 2;
		};
	} else if (values.nextcondition == 41){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.4ABC = list.s41.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.4ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.4ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 42){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.4ABC = list.s42.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.4ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.4ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};

	} else if (values.nextcondition == 43){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.4ABC = list.s43.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.4ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.4ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 51){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.5ABC = list.s51.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.5ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.5ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};

	} else if (values.nextcondition == 52){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.5ABC = list.s52.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.5ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.5ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	} else if (values.nextcondition == 53){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.5ABC = list.s53.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
		if (values.5ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.5ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.5ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	};
]

/stimulustimes = [0 = noise1, noise2, noise3, targetS, noise4, noise5, noise6]
/responseinterrupt = trial
/responsetime = 0
/validresponse = (parameters.leftkey, parameters.rightkey)
/correctresponse = (values.responsekey2)
/timeout = (parameters.trialtimeout)

/ontrialend = [
	list.overallACC.appenditem(trial.S.correct);
	
	if (values.noisecondition == 1) {
		list.ACC_noise1.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_noise1.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};
	} else if (values.noisecondition == 2) {
		list.ACC_noise2.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_noise2.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};
	} else if (values.noisecondition == 3) {
		list.ACC_noise3.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_noise3.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};	
	} else if (values.noisecondition == 4) {
		list.ACC_noise4.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_noise4.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};	
	} else if (values.noisecondition == 5) {
		list.ACC_noise5.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_noise5.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};	
	};
	
	if (values.spacingcondition == 1) {
		list.ACC_spacing1.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_spacing1.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};
	} else if (values.spacingcondition == 2) {
		list.ACC_spacing2.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_spacing2.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		};	
	} else if (values.spacingcondition == 3) {
		list.ACC_spacing3.appenditem(trial.S.correct);
		if (trial.S.correct){ 
			list.RT_spacing3.appenditem(trial.S.latency);
			list.overallRT.appenditem(trial.S.latency);
		}; 		
	};
]
</trial>

<trial C>
/ ontrialbegin = [
	values.nextcondition = list.c.nextvalue;
	values.noisecondition = substring(values.nextcondition,0,1);
	values.spacingcondition = substring(values.nextcondition,1,1);
	values.3AB = "";
	values.4ABC = "";
	values.5ABC = "";
	values.trialtype = "C";
	values.trialtype = concat(values.trialtype, values.nextcondition);

	if (values.nextcondition == 11){
		values.noise1 = 4;
		values.noise2 = 4;
		values.noise3 = 4;
		values.noise4 = 4;
		values.noise5 = 4;
		values.noise6 = 4;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 12){
		values.noise1 = 4;
		values.noise2 = 4;
		values.noise3 = 4;
		values.noise4 = 4;
		values.noise5 = 4;
		values.noise6 = 4;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 13){
		values.noise1 = 4;
		values.noise2 = 4;
		values.noise3 = 4;
		values.noise4 = 4;
		values.noise5 = 4;
		values.noise6 = 4;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
	} else if (values.nextcondition == 21){
		values.noise1 = 3;
		values.noise2 = 3;
		values.noise3 = 3;
		values.noise4 = 3;
		values.noise5 = 3;
		values.noise6 = 3;
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
	} else if (values.nextcondition == 22){
		values.noise1 = 3;
		values.noise2 = 3;
		values.noise3 = 3;
		values.noise4 = 3;
		values.noise5 = 3;
		values.noise6 = 3;
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
	} else if (values.nextcondition == 23){
		values.noise1 = 3;
		values.noise2 = 3;
		values.noise3 = 3;
		values.noise4 = 3;
		values.noise5 = 3;
		values.noise6 = 3;
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
	} else if (values.nextcondition == 31){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.3AB = list.c31.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		
		if (values.3AB == "A"){
			values.noise1 = 1;
			values.noise2 = 1;
			values.noise3 = 1;
			values.noise4 = 1;
			values.noise5 = 1;
			values.noise6 = 1;
		} else if (values.3AB == "B"){	
			values.noise1 = 2;
			values.noise2 = 2;
			values.noise3 = 2;
			values.noise4 = 2;
			values.noise5 = 2;
			values.noise6 = 2;
		};
	} else if (values.nextcondition == 32){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.3AB = list.c32.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);		
		if (values.3AB == "A"){
			values.noise1 = 1;
			values.noise2 = 1;
			values.noise3 = 1;
			values.noise4 = 1;
			values.noise5 = 1;
			values.noise6 = 1;
		} else if (values.3AB == "B"){
			values.noise1 = 2;
			values.noise2 = 2;
			values.noise3 = 2;
			values.noise4 = 2;
			values.noise5 = 2;
			values.noise6 = 2;
		};
	} else if (values.nextcondition == 33){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.3AB = list.c33.nextvalue;
		values.trialtype = concat(values.trialtype, values.3AB);
		if (values.3AB == "A"){
			values.noise1 = 1;
			values.noise2 = 1;
			values.noise3 = 1;
			values.noise4 = 1;
			values.noise5 = 1;
			values.noise6 = 1;
		} else if (values.3AB == "B"){
			values.noise1 = 2;
			values.noise2 = 2;
			values.noise3 = 2;
			values.noise4 = 2;
			values.noise5 = 2;
			values.noise6 = 2;
		};
	} else if (values.nextcondition == 41){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.4ABC = list.c41.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		if (values.4ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.4ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.4ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};
	} else if (values.nextcondition == 42){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.4ABC = list.c42.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
		
		if (values.4ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.4ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.4ABC == "C") {
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;			
		};
	} else if (values.nextcondition == 43){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.4ABC = list.c43.nextvalue;
		values.trialtype = concat(values.trialtype, values.4ABC);
	
		if (values.4ABC == "A"){
			values.noise1 = 8;
			values.noise2 = 9;
			values.noise3 = 10;
			values.noise4 = 8;
			values.noise5 = 9;
			values.noise6 = 10;
		} else if (values.4ABC == "B"){
			values.noise1 = 10;
			values.noise2 = 8;
			values.noise3 = 9;
			values.noise4 = 10;
			values.noise5 = 8;
			values.noise6 = 9;
		} else if (values.4ABC == "C"){
			values.noise1 = 9;
			values.noise2 = 10;
			values.noise3 = 8;
			values.noise4 = 9;
			values.noise5 = 10;
			values.noise6 = 8;
		};

	} else if (values.nextcondition == 51){
		values.noise1x = expressions.noise1x1;
		values.noise2x = expressions.noise2x1;
		values.noise3x = expressions.noise3x1;
		values.noise4x = expressions.noise4x1;
		values.noise5x = expressions.noise5x1;
		values.noise6x = expressions.noise6x1;
		values.5ABC = list.c51.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);

		if (values.5ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.5ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.5ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};

	} else if (values.nextcondition == 52){
		values.noise1x = expressions.noise1x2;
		values.noise2x = expressions.noise2x2;
		values.noise3x = expressions.noise3x2;
		values.noise4x = expressions.noise4x2;
		values.noise5x = expressions.noise5x2;
		values.noise6x = expressions.noise6x2;
		values.5ABC = list.c52.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);
	
		if (values.5ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.5ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.5ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};

	} else if (values.nextcondition == 53){
		values.noise1x = expressions.noise1x3;
		values.noise2x = expressions.noise2x3;
		values.noise3x = expressions.noise3x3;
		values.noise4x = expressions.noise4x3;
		values.noise5x = expressions.noise5x3;
		values.noise6x = expressions.noise6x3;
		values.5ABC = list.c53.nextvalue;
		values.trialtype = concat(values.trialtype, values.5ABC);

		if (values.5ABC == "A"){
			values.noise1 = 5;
			values.noise2 = 6;
			values.noise3 = 7;
			values.noise4 = 5;
			values.noise5 = 6;
			values.noise6 = 7;
		} else if (values.5ABC == "B"){
			values.noise1 = 7;
			values.noise2 = 5;
			values.noise3 = 6;
			values.noise4 = 7;
			values.noise5 = 5;
			values.noise6 = 6;
		} else if (values.5ABC == "C"){
			values.noise1 = 6;
			values.noise2 = 7;
			values.noise3 = 5;
			values.noise4 = 6;
			values.noise5 = 7;
			values.noise6 = 5;
		};
	};
]
/stimulustimes = [0 = noise1, noise2, noise3, targetC, noise4, noise5, noise6]
/responseinterrupt = trial
/responsetime = 0
/validresponse = (parameters.leftkey, parameters.rightkey)
/correctresponse = (values.responsekey2)
/timeout = (parameters.trialtimeout)

/ontrialend = [
	list.overallACC.appenditem(trial.C.correct);
	
	if (values.noisecondition == 1) {
		list.ACC_noise1.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_noise1.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};
	} else if (values.noisecondition == 2) {
		list.ACC_noise2.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_noise2.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};
	} else if (values.noisecondition == 3) {
		list.ACC_noise3.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_noise3.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};	
	} else if (values.noisecondition == 4) {
		list.ACC_noise4.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_noise4.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};	
	} else if (values.noisecondition == 5) {
		list.ACC_noise5.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_noise5.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};	
	};
	
	if (values.spacingcondition == 1) {
		list.ACC_spacing1.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_spacing1.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};
	} else if (values.spacingcondition == 2) {
		list.ACC_spacing2.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_spacing2.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		};	
	} else if (values.spacingcondition == 3) {
		list.ACC_spacing3.appenditem(trial.C.correct);
		if (trial.C.correct){ 
			list.RT_spacing3.appenditem(trial.C.latency);
			list.overallRT.appenditem(trial.C.latency);
		}; 		
	};
]
</trial>

**************************************************************************************************************
**************************************************************************************************************
	PRACTICE BLOCKS
**************************************************************************************************************
**************************************************************************************************************
<block Instructions_Practice>
/preinstructions = (instruct_begin)
</block>

<block practice>
/ bgstim = (ResponsekeyReminder_HK, ResponsekeyReminder_SC)
/onblockbegin = [
	values.countpracticeblocks +=1;
]
/trials = [1-32 = fixation]
/errormessage = true(errortext, 500)
/onblockend = [
	if (values.countpracticeblocks == parameters.maxpracticeblocks) {
		list.nexttrial.reset(); 
		list.h.reset(); 
		list.k.reset(); 
		list.s.reset(); 
		list.c.reset();
		list.h31.reset(); 
		list.h32.reset(); 
		list.h33.reset();
		list.k31.reset(); 
		list.k32.reset(); 
		list.k33.reset();
		list.s31.reset(); 
		list.s32.reset(); 
		list.s33.reset();
		list.c31.reset(); 
		list.c32.reset(); 
		list.c33.reset();
		list.h41.reset(); 
		list.h42.reset(); 
		list.h43.reset();
		list.k41.reset(); 
		list.k42.reset(); 
		list.k43.reset();
		list.s41.reset(); 
		list.s42.reset(); 
		list.s43.reset();
		list.c41.reset(); 
		list.c42.reset(); 
		list.c43.reset();
		list.h51.reset(); 
		list.h52.reset(); 
		list.h53.reset();
		list.k51.reset(); 
		list.k52.reset(); 
		list.k53.reset();
		list.s51.reset(); 
		list.s52.reset(); 
		list.s53.reset();
		list.c51.reset(); 
		list.c52.reset(); 
		list.c53.reset();
		
		text.nonoisetargetmixed.resetselection();
		text.nonoisetargetblocked.resetselection();
	};

	list.overallACC.reset();
	list.overallRT.reset();
	list.ACC_noise1.reset();
	list.RT_noise1.reset();
	list.ACC_noise2.reset();
	list.RT_noise2.reset();
	list.ACC_noise3.reset();
	list.RT_noise3.reset();	
	list.ACC_noise4.reset();
	list.RT_noise4.reset();	
	list.ACC_noise5.reset();
	list.RT_noise5.reset();	
	list.ACC_spacing1.reset();
	list.RT_spacing1.reset();
	list.ACC_spacing2.reset();
	list.RT_spacing2.reset();
	list.ACC_spacing3.reset();
	list.RT_spacing3.reset();		
	list.ACC_nonoiseB.reset();
	list.RT_nonoiseB.reset();
	list.ACC_nonoiseM.reset();
	list.RT_nonoiseM.reset();	
]
/branch = [
	if (values.countpracticeblocks < parameters.maxpracticeblocks) {
		return block.practice;
	};
]
/recorddata = true
</block>

**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENTAL BLOCKS
**************************************************************************************************************
**************************************************************************************************************
<block Instructions_ExperimentStart>
/preinstructions = (instruct_start)
</block>

<block Blocked>
/ bgstim = (ResponsekeyReminder_HK, ResponsekeyReminder_SC)
/preinstructions = (instruct_blocked)
/trials = [1-12 = fixationBlocked]
</block>

<block Mixed>
/ bgstim = (ResponsekeyReminder_HK, ResponsekeyReminder_SC)
/trials = [1-32 = fixation]
</block>

<block Instructions_NewSession>
/preinstructions = (instruct_newsession)
</block>

**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENT 
**************************************************************************************************************
**************************************************************************************************************
NOTE:
responsekey assignment is counterbalanced by groupnumber (odd vs. even)

<expt>
/postinstructions = (instruct_end)
/onexptbegin = [
	values.responsekey1 = parameters.leftkey; 
	values.responsekey2 = parameters.rightkey;
	values.responsecondition = 1;
	text.ResponsekeyReminder_HK.hposition = 25%;
	text.ResponsekeyReminder_SC.hposition = 75%;
]	
/groups = (1 of 2)
/blocks = [
	1 = Instructions_Practice; 
	2 = practice; 
	3 = Instructions_ExperimentStart;
	4-6 = Mixed; 
	7 = Blocked; 
	8 = Instructions_NewSession;
	9-11 = Mixed; 
	12 = Blocked; 
	13 = Instructions_NewSession;
	14-16 = Mixed;
	17 = Blocked; 
	18 = Instructions_NewSession;
	19-21 = Mixed; 
	22 = Blocked; 
	23 = Instructions_NewSession;
	24-26 = Mixed; 
	27 = Blocked; 
	28 = Instructions_NewSession;
	29-31 = Mixed; 
	32 = Blocked
]
</expt>

<expt>
/postinstructions = (instruct_end)
/onexptbegin = [
	values.responsekey1 = parameters.rightkey; 
	values.responsekey2 = parameters.leftkey;
	values.responsecondition = 2;
	text.ResponsekeyReminder_HK.hposition = 75%;
	text.ResponsekeyReminder_SC.hposition = 25%;	
]
/groups = (2 of 2)
/blocks = [
	1 = Instructions_Practice; 
	2 = practice; 
	3 = Instructions_ExperimentStart;
	4-6 = Mixed; 
	7 = Blocked; 
	8 = Instructions_NewSession;
	9-11 = Mixed; 
	12 = Blocked; 
	13 = Instructions_NewSession;
	14-16 = Mixed; 
	17 = Blocked; 
	18 = Instructions_NewSession;
	19-21 = Mixed; 
	22 = Blocked; 
	23 = Instructions_NewSession;
	24-26 = Mixed; 
	27 = Blocked; 
	28 = Instructions_NewSession;
	29-31 = Mixed; 
	32 = Blocked;
]
</expt>
**************************************************************************************************************
                                             END OF FILE
**************************************************************************************************************